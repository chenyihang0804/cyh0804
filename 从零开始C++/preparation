1. tcp三次握手发生在listen、connect、accept哪个阶段？
accept发生在三次握手之后。设计原理主要是防止DDOS攻击。DDOS攻击主要是因为，accept是用来分配资源的，当客户端跟服务端进行连接，发送syn，服务端收到
之后缺不再理会客户端的请求，这个时候如果有非常多的用户进行连接，比如10000个，此时就会造成在服务端所有资源都用accept分配了，这个就是DDOS攻击。

2. 最长连续公共子串，比如abcdefgh和ghdefgcc输出defg。
动态规划，注意区别最长连续公共子串和最长公共子序列的区别。(dp[i][j]表示 LCS 的长度)
最长公共子序列的状态转移方程为：
假设当input1[i-1] == input2[j-1]时，dp[i][j]=max(dp[i-1][j-1]+1,max(dp[i-1][j],T[i][j-1]))。
当input1[i-1] != input2[j-1]时，dp[i][j] = max(dp[i-1][j],T[i][j-1])。(取它上方或左边的较大值)

最长公共子串的状态转移方程为：
当input1[i] == input2[j]时，dp[i][j]=dp[i-1][j-1]+1。
当input1[i] != input2[j]时，dp[i][j] = 0。

3. 集合的所有子集
可以用三种解法，以[1,2,3]为例子
第一种：非递归解法，（比递归简单些），先给数组排序，然后按照一位一位的往上叠加，比如一开始是空集，那么先在空集上加1，就变成了[],和[1];接下来在之前的子
集上每个都加2，可以得到[2],[1,2],现在所有子集为[],[1],[2],[1,2]，同理处理3。

第二种：DFS深度优先搜索。因为每个数字只有两种状态，要么被选择，要么不被选择，那么可以构造出一棵二叉树，左子树表示选择这一层处理的节点，右子树表示不选择，
最终的叶节点就是所有子集合。

第三种：位运算解法。1表示对应数字被选中，0表示没有选中。

4. 求两条链表的是否有交点
① 如果两条链表都没有环，就是求两条单链表是否有交点；有三种思路
第一种：如果两条单链表相交，那么他们最后一个节点的地址肯定是相同的，所以只需要判断两条链表的最后一个节点是否相同即可；
第二种：两条链表设为A，B，将B链表链到A上，从B链表开始遍历，如果可以回到B的头结点，那么说明相交；
第三种：两条链表相交，说明从交点开始到尾节点都是相同的节点，首先遍历两个链表，获取长度a, b，a > b，让长链表先走a-b的长度，然后两个链表一起前进，相遇
的第一个节点为交点；

②如果两条链表一个有环，一个没环，那么这种情况肯定不会存在相交；

③两条链表都有环，分两种情况讨论：
第一种：交点在环内；
第二种：交点不在环内；
找到两条链表的环入口pos1, pos2，然后判断pos1是否和pos2相等，如果相等，证明属于第二种情况，然后以pos1作为两条链表的终点，利用求不带环单链表交点的方
分别以pos1和pos2作为终止节点，用求不带环单链表交点的方法求解。其中，必然一个有解，一个无解。取有解的那一组作为我们的答案。法求交点；如果pos1!=pos2，
那么从pos1开始遍历环中的节点，如果没有发现有节点与pos2相等，则说明两条链表没有交点，否则，存在交点；分别以pos1和pos2作为终止节点，用求不带环单链表
交点的方法求解。其中，必然一个有解，一个无解。取有解的那一组作为我们的答案。

判断一个链表是否有环：快慢指针；
环的长度：第一次碰撞点出发到第二次碰撞走过的长度；
环的入口：第一次碰撞点到环口的距离等于头指针到环入口的距离，所以从头指针和碰撞点分别遍历链表，第一次相遇点就为环的入口；

5. 设计一个大数加法：用字符串模拟数字；

6. 求二叉树路径和
Input: [1,2,3]
    1
   / \
  2   3
Output: 25
两种解法：
第一种：DFS递归；
第二种：先序遍历迭代算法；

7. 快速排序：我们首先要找一个数字作为基准数（这只是个专用名词）。为了方便，我们一般选择第1个数字作为基准数（其实选择第几个并没有关系）。接下来我们
需要把这个待排序的数列中小于基准数的元素移动到待排序的数列的左边，把大于基准数的元素移动到待排序的数列的右边。这时，左右两个分区的元素就相对有序了；接
着把两个分区的元素分别按照上面两种方法继续对每个分区找出基准数，然后移动，直到各个分区只有一个数时为止。

8. 二分查找：
①有序数组，是否有value，返回下标，没有返回-1
②有序数组，找出第一次出现value的下标，没有返回-1；
③有序数组，找出最接近value且比value大的数的下标，若有多个，返回第一个，若没有，返回-1；

9. 关于索引
①为什么数据库用B+树不用Hash表：
Hash表不适合范围查询；Hash索引在大规模数据时，容易出现冲突，造成查询效率低下；Hash索引满足不了排序操作；
②为什么数据库用B+树不用B树：
B树每个节点都有data域（指针），这样就造成磁盘I/O次数过多，造成查询效率下降，而B+树除了叶子节点，其他节点都不存储数据，节点较少，I/O次数少，而且指针
都存在与叶子节点，所有的叶子节点间都有一个链指针，这样遍历节点就能获得全部数据，进行区间访问，这点B树没法做到；
③为什么数据库用B+树不用红黑树：
在大规模数据下，红黑树的深度往往很大，而磁盘I/O次数往往是由树的高度决定的，效率很低。

磁盘读取数据的过程：磁盘臂移动到数据所在的柱面，然后找到指定盘面，之后再旋转到数据所在的磁道，最后进行读写。

数据库设计原理：一个节点设计为一个页；这样每个节点只需要一次I/O就能全部载入，所以在每次新建节点的时候，往往直接申请一个页的空间，这样可以保证一个节点
物理上抖存储在一个页里，因为计算机的存储分配是按页对齐的。

10. 大数减法

11. 一个父进程创建3个子进程，要求创建子进程是输出对应信息，子进程退出后父进程输出对应信息，子进程创建成功后输出对应信息；

12. 删除给定字符串对应的字符串；

13. N = 5；S = {1，2，3，5，4}， C = 7；return 最大剩余 = 1；

14. 
